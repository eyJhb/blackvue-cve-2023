import chardet
import hashlib
import socket
import struct
import sys

PACKET_START = 0x00000001
PACKET_FAMILY1 = 0x03E8
PACKET_FAMILY2 = 0x07D0

# packet_actions dictionary contains all available actions discovered so far
packet_actions = {
    # 1 pings the device 
    "ping": 0x0001,
    # 2 gets time in some strange encoding - tried chardet.detect but couldn't figure out what encoding it has
    "time": 0x0002,
    "restart": 0x0003,
    "ready-upgrade": 0x0005,
    "upload-firmware": 0x0006,
    # 7 does something with settings - wasn't able to really discern any differences, but the camera sound for settings changed plays
    "settings-change": 0x0007,
    # 8 also restarts? not sure about difference with 3
    "restart-2": 0x0008,
    # 9 does something, return code looks like an err so maybe takes another param
    "unknown-9": 0x0009,
    # 10 triggers a wifi scan
    "scan-wifi": 0x000A,
    # 11 triggers manual recordings
    "manual-record": 0x000B,
    # 12 gets model, serial, firmware version details
    "product-info": 0x000C,
    # 13 will trigger a format of the SD card
    "format-drive": 0x000D,
    # 14 Gathers SIM details
    "sim-info": 0x000C,
    # 15 Disables SIM? or prints additional SIM info
    "disable-sim": 0x000D
}


class BlackVue(object):
    def __init__(self, host):
        self.debug = True

        self.host = host
        self.port = 9771

        self.conn = None

    def log(self, msg):
        if self.debug:
            print("DEBUG: {}".format(msg))

    def connect(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, self.port))
        self.conn = s

    def close(self):
        self.conn.close()

    def _send(self, msg):
        self.conn.send(msg)

    def _read(self):
        # read first part of packet, which is 12
        # 4 for packet start, 2 packet family, 2 packet type, 4 packet length
        header = self.conn.recv(12)
        (_, _, _, length) = struct.unpack(">lhhl", header)
        self.log("receiving {} bytes of data".format(length))

        return self.conn.recv(length)

    def sendPacket(self, packet):
        packet = struct.pack(">lhhl", PACKET_START, PACKET_FAMILY1, packet, 0)
        self._send(packet)
        return self._read()

    def uploadFirmware(self, firmware_path):
        firmware = None
        with open(firmware_path, "rb") as file:
            firmware = file.read()
        md5hash = hashlib.md5(firmware).digest()

        packet = (
            struct.pack(
                ">lhhl",
                PACKET_START,
                PACKET_FAMILY2,
                packet_actions["upload-firmware"],
                len(md5hash) + len(firmware),
            )
            + md5hash
            + firmware
        )
        self.log("Firmware: {}".format(firmware_path))
        self.log("Size: {}".format(len(firmware)))
        self.log("MD5: {}".format(md5hash.hex()))
        self.log("Length: {}".format(len(md5hash) + len(firmware)))
        self._send(packet)
        return self._read()


if len(sys.argv) < 2:
    print("Usage python fota.py <host> <ping|restart|upgrade> <?firmware-path>")
    exit()

host = sys.argv[1]
x = BlackVue(host)
x.connect()

action = sys.argv[2]

# If packet_actions contains the action - just sendPacket with that action
if packet_actions[action]:
    ret = x.sendPacket(action)
elif action == "test":
    if len(sys.argv) != 4:
        print("Usage python fota.py <host> test <packet to send as int>")
        exit()

    custom_packet = int(sys.argv[3])
    ret = x.sendPacket(custom_packet)
elif action == "upgrade":
    if len(sys.argv) != 4:
        print("Usage python fota.py <host> upgrade <path-to-tgz>")
        exit()

    path = sys.argv[3]
    print(x.sendPacket(packet_actions["ready-upgrade"]))
    ret = x.uploadFirmware(path)

x.close()
print(ret)
encoding = chardet.detect(ret)
print(encoding)
print(ret.decode(encoding['encoding']))
